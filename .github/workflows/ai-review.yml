name: AI Code Reviewer

on:
  pull_request:
    types: [opened, synchronize]
  issues:
    types: [opened]

# Set the permissions for the GITHUB_TOKEN
permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  ai_review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @google/generative-ai

      - name: AI Review PR Files
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          FILES=$(git diff --name-only origin/main)
          for file in $FILES; do
            node .ai-bot/review.js $file >> review_output.md
          done

      - name: Create Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Read the review output
            const reviewContent = fs.readFileSync('review_output.md', 'utf8');
            
            // Only post if there's content
            if (reviewContent.trim()) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: reviewContent
              });
            }

  ai_label_issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: npm install @google/generative-ai

      - name: AI Label Issue
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          RESPONSE=$(node -e "
            import { GoogleGenerativeAI } from '@google/generative-ai';
            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
            (async () => {
              const result = await model.generateContent(\`Suggest 3 relevant GitHub labels for this issue: ${ISSUE_BODY}\`);
              console.log(result.response.text());
            })();
          ")
          echo "Labels: $RESPONSE"
